/*
 * Mandatory:
 *
 * vars.prometheusOperator.image.name
 * vars.prometheusOperator.image.version
 *
 * Optional:
 * 
 * vars.prometheusOperator.limits.cpu
 * vars.prometheusOperator.limits.memory
 * vars.prometheusOperator.requests.cpu
 * vars.prometheusOperator.requests.memory
 * vars.prometheusOperator.affinity.key
 * vars.prometheusOperator.affinity.name
 * vars.prometheusOperator.affinity.required
 * vars.prometheusOperator.allowOnMaster
 * vars.prometheusOperator.tolerations[].key
 * vars.prometheusOperator.tolerations[].effect
 * vars.prometheusOperator.tolerations[].value
 */

import "_affinities.stg"
import "_resources.stg"
import "_tolerations.stg"

ab-prometheus-operator-deployment-yaml(parent, vars) ::= <<
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  labels:
    k8s-app: prometheus-operator
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "prometheus-operator"
  name: prometheus-operator
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: prometheus-operator
  template:
    metadata:
      labels:
        k8s-app: prometheus-operator
    spec:
      containers:
      - args:
        - --kubelet-service=kube-system/kubelet
        - --config-reloader-image=quay.io/coreos/configmap-reload:v0.0.1
        image: quay.io/coreos/prometheus-operator:v0.19.0
        name: prometheus-operator
        ports:
        - containerPort: 8080
          name: http
        <resourcesGroup(parent, vars, vars.prometheusOperator.limits, vars.prometheusOperator.requests)>
      nodeSelector:
        beta.kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: prometheus-operator
<tolerationMasterGroup(parent, vars, vars.prometheusOperator.allowOnMaster)>
<tolerationsGroup(parent, vars, vars.prometheusOperator.tolerations, vars.prometheusOperator.allowOnMaster)>
<affinitiesGroup(parent, vars, vars.prometheusOperator.affinity)>

>>
